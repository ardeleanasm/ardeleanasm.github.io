<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://ardeleanasm.github.io/" rel="self" type="application/rss+xml"/><title>Bending bits...</title><link>http://ardeleanasm.github.io/</link><description>Bytes and words...</description><lastBuildDate>Thu, 10 Nov 2022 22:28:46 +0200</lastBuildDate><generator>clj-rss</generator><item><guid>http://ardeleanasm.github.io/posts-output/2022-11-10-Vicsek-fractal/</guid><link>http://ardeleanasm.github.io/posts-output/2022-11-10-Vicsek-fractal/</link><title>Vicsek fractal</title><description></description><pubDate>Thu, 10 Nov 2022 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2022-07-03-Rust-Pass-by-Reference/</guid><link>http://ardeleanasm.github.io/posts-output/2022-07-03-Rust-Pass-by-Reference/</link><title>Rust Pass by Reference</title><description></description><pubDate>Sun, 03 Jul 2022 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2022-04-10-Deploy-Cryogen-blog/</guid><link>http://ardeleanasm.github.io/posts-output/2022-04-10-Deploy-Cryogen-blog/</link><title>Deploy Cryogen blog on Github</title><description></description><pubDate>Sun, 10 Apr 2022 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2022-03-07-Decimal-to-binary-in-clojure/</guid><link>http://ardeleanasm.github.io/posts-output/2022-03-07-Decimal-to-binary-in-clojure/</link><title>Decimal to binary conversion in Clojure</title><description></description><pubDate>Mon, 07 Mar 2022 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-11-29-Simple-GA-in-Clojure/</guid><link>http://ardeleanasm.github.io/posts-output/2021-11-29-Simple-GA-in-Clojure/</link><title>Simple GA in Clojure</title><description>In this blog post I’ll present a simple Genetic Algorithm implementation made in Clojure. The application is based on the one presented by Lee Spector in HERE.
The task of the Genetic Algorithm is to evolve, starting from random generated individuals, to a sequence of bits that sums to a particular number.</description><pubDate>Mon, 29 Nov 2021 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-11-26-Clojure-Some-recursive-functions/</guid><link>http://ardeleanasm.github.io/posts-output/2021-11-26-Clojure-Some-recursive-functions/</link><title>Clojure -&gt; Some recursive functions</title><description></description><pubDate>Fri, 26 Nov 2021 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-11-25-Some-recursive-algorithms-using-C++-template-metaprogramming/</guid><link>http://ardeleanasm.github.io/posts-output/2021-11-25-Some-recursive-algorithms-using-C++-template-metaprogramming/</link><title>Some recursive algorithms using C++ template metaprogramming</title><description>Fibonacci</description><pubDate>Thu, 25 Nov 2021 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-11-11-Latexdiff-sometimes-is-just-a-pain/</guid><link>http://ardeleanasm.github.io/posts-output/2021-11-11-Latexdiff-sometimes-is-just-a-pain/</link><title>Latexdiff – sometimes is just a pain</title><description>Just posting a command for latexdiff that saved me from trying to solve a lot of errors:</description><pubDate>Thu, 11 Nov 2021 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-10-06-Thread-safe-Singleton-Design-Pattern-in-C++/</guid><link>http://ardeleanasm.github.io/posts-output/2021-10-06-Thread-safe-Singleton-Design-Pattern-in-C++/</link><title>Thread-safe Singleton Design Pattern in C++</title><description></description><pubDate>Wed, 06 Oct 2021 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-09-28-C++-map-of-member-functions/</guid><link>http://ardeleanasm.github.io/posts-output/2021-09-28-C++-map-of-member-functions/</link><title>C++ map of member functions</title><description>Using look-up tables of member functions is a common use case for implementing and registering callbacks for certain events.
The syntax for doing this is not quite straightforward.</description><pubDate>Tue, 28 Sep 2021 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-09-23-Debugging-with-GDB/</guid><link>http://ardeleanasm.github.io/posts-output/2021-09-23-Debugging-with-GDB/</link><title>Debugging with GDB</title><description>Some useful comands for debugging C/C++ applications using GDB from command line:Starting GDB:</description><pubDate>Thu, 23 Sep 2021 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2021-09-23-Decorator-Design-Pattern-in-C++/</guid><link>http://ardeleanasm.github.io/posts-output/2021-09-23-Decorator-Design-Pattern-in-C++/</link><title>Decorator Design Pattern in C++</title><description></description><pubDate>Thu, 23 Sep 2021 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2020-06-03-Keep-Processes-Running-after-SSH-session-ended/</guid><link>http://ardeleanasm.github.io/posts-output/2020-06-03-Keep-Processes-Running-after-SSH-session-ended/</link><title>Keep processes running after SSH session ended</title><description>Ssh into remote OS, type screen and start the process you want. Use CTRL-A then CTRL-D to detach the screen session and log out. Use screen -r to resume the detached screen session.</description><pubDate>Wed, 03 Jun 2020 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2020-05-19-Fractals-Generator-in-Haskell/</guid><link>http://ardeleanasm.github.io/posts-output/2020-05-19-Fractals-Generator-in-Haskell/</link><title>Fractals Generator in Haskell</title><description>IntroductionIn this post I'll shortly describe some functions from a fractals generator that I wrote in Haskell. Some parts of the application are from the repository mentioned in this post. Some modules, like Plots, are reused from that module since I don't have experience with working with images in Haskell.
Currently there are not so much differences between the original repository and what I pushed into my repository but I hope that, in future, after I implement my ideas, the code will look more different.</description><pubDate>Tue, 19 May 2020 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2019-05-04-Neighborhood-Search-in-Haskell/</guid><link>http://ardeleanasm.github.io/posts-output/2019-05-04-Neighborhood-Search-in-Haskell/</link><title>Neighborhood Search</title><description>Implementation</description><pubDate>Sat, 04 May 2019 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2018-08-19-Input-Capture-Linux-Char-Driver-first-part/</guid><link>http://ardeleanasm.github.io/posts-output/2018-08-19-Input-Capture-Linux-Char-Driver-first-part/</link><title>Input Capture Linux Char Driver - I part</title><description>IntroductionTo the best of my knowledge, on Linux there is no way to configure a hardware timer in input capture mode although, since it can be used on embedded systems, this feature can be needed. For example, if one needs to measure the period of a signal on a development board running a Linux distro he has no other way than sampling the GPIOs in userspace with the cost of a resolution of milliseconds.</description><pubDate>Sun, 19 Aug 2018 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2018-07-29-Circuit-Design-and-Simulation-in-Geda/</guid><link>http://ardeleanasm.github.io/posts-output/2018-07-29-Circuit-Design-and-Simulation-in-Geda/</link><title>Circuit Design and Simulation in Geda</title><description>This post won't be a tutorial on electronic circuits but will present a free method to desing and simulate electronic circuits on Linux using Geda and ngspice.</description><pubDate>Sun, 29 Jul 2018 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2018-06-22-checksum-generator-haskell/</guid><link>http://ardeleanasm.github.io/posts-output/2018-06-22-checksum-generator-haskell/</link><title>Checksum generator in Haskell</title><description>A few years ago I wrote a checksum generator app in C++ and evolved in, what I like to say, an app with password cracking capabilities. In fact, it was only an app that opened a file and calculated the hash for each line and tested with the target hash value. Simple!</description><pubDate>Fri, 22 Jun 2018 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2018-06-15-Monte-Carlo-Integration/</guid><link>http://ardeleanasm.github.io/posts-output/2018-06-15-Monte-Carlo-Integration/</link><title>Monte Carlo Integration</title><description>Monte Carlo methods are numerical techniques which rely on random
sampling to approximate their results. Thus, in Monte Carlo integration,
the process of numerical estimation of integrals is applied.</description><pubDate>Fri, 15 Jun 2018 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2018-02-15-Monte-Carlo-Pi-Estimation/</guid><link>http://ardeleanasm.github.io/posts-output/2018-02-15-Monte-Carlo-Pi-Estimation/</link><title>Monte Carlo Pi Estimation</title><description>In this post I'll show how Pi can be computed using a Monte Carlo algorithm in F#. Basically, using the idea of a dartboard we can obtain the value of PI by simply
calculating the number of darts that land in the dartboard verses those that land outside it. And by increasing the number of throws we will get closer to PI's value, for example
throwing the dart 1000 times will be closer to PI than throwing the dart 10 or 100 times.The formula that we will use to determine PI by throwing darts is:</description><pubDate>Thu, 15 Feb 2018 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2017-11-30-Polynomial-Value-in-Haskell/</guid><link>http://ardeleanasm.github.io/posts-output/2017-11-30-Polynomial-Value-in-Haskell/</link><title>Polynomial Value in Haskell</title><description>While working on a project that analyze some signals in Haskell I found that I need a simple function polyVal that evaluates a polynomial at specific values.After a failed search for this function ( I thought that I can find a library or an implementation) I decided to write it on my own, anyway, it's a simple function.</description><pubDate>Thu, 30 Nov 2017 00:00:00 +0200</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2017-08-18-Quantum-Computing-in-Haskell-fourth-part/</guid><link>http://ardeleanasm.github.io/posts-output/2017-08-18-Quantum-Computing-in-Haskell-fourth-part/</link><title>Quantum Computing in Haskell - IV part</title><description>Articles</description><pubDate>Fri, 18 Aug 2017 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2017-08-01-Quantum-Computing-in-Haskell-third-part/</guid><link>http://ardeleanasm.github.io/posts-output/2017-08-01-Quantum-Computing-in-Haskell-third-part/</link><title>Quantum Computing in Haskell - III part</title><description>Articles</description><pubDate>Tue, 01 Aug 2017 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2017-07-28-Quantum-Computing-in-Haskell-second-part/</guid><link>http://ardeleanasm.github.io/posts-output/2017-07-28-Quantum-Computing-in-Haskell-second-part/</link><title>Quantum Computing in Haskell - II part</title><description>Articles</description><pubDate>Fri, 28 Jul 2017 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2017-07-26-Quantum-Computing-in-Haskell/</guid><link>http://ardeleanasm.github.io/posts-output/2017-07-26-Quantum-Computing-in-Haskell/</link><title>Quantum Computing in Haskell - I part</title><description>Articles</description><pubDate>Wed, 26 Jul 2017 00:00:00 +0300</pubDate></item><item><guid>http://ardeleanasm.github.io/posts-output/2016-08-17-deutschs-algorithm/</guid><link>http://ardeleanasm.github.io/posts-output/2016-08-17-deutschs-algorithm/</link><title>Deutsch's Algorithm</title><description>In this post I'll present a quantum implementation of the Deutsch's algorithm using a library QuantumComputingLib that I wrote this week.First, I should write a little about the library. It's version 1.0-SNAPSHOT only and it doesn't have an official release version.
For now, it only has a basic Javadoc and only provides methods for well-known operations on qubits and matrices.
I hope that I will able to offer support for it and that this project will be active for a long time, I hope that at least 2 years.
If someone want to use and test the library, it can be found at the next link.
Also, for using this algorithm, you'll need the ComplexNumber library.
This library can be found at the next link.</description><pubDate>Wed, 17 Aug 2016 00:00:00 +0300</pubDate></item></channel></rss>