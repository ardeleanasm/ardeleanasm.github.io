<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ardeleanasm</title>
    <link href="http://ardeleanasm.github.io/atom.xml" rel="self" />
    <link href="http://ardeleanasm.github.io" />
    <id>http://ardeleanasm.github.io/atom.xml</id>
    <author>
        <name>ardeleanasm</name>
        <email>ardeleanasm@gmail.com</email>
    </author>
    <updated>2018-08-19T00:00:00Z</updated>
    <entry>
    <title>Input Capture Linux Char Driver - I part</title>
    <link href="http://ardeleanasm.github.io/posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.html" />
    <id>http://ardeleanasm.github.io/posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.html</id>
    <published>2018-08-19T00:00:00Z</published>
    <updated>2018-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[Input Capture Linux Char Driver]]></summary>
</entry>
<entry>
    <title>2018-08-19-Input-Capture-Linux-Char-Driver-first-part</title>
    <link href="http://ardeleanasm.github.io/posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.html" />
    <id>http://ardeleanasm.github.io/posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.html</id>
    <published>2018-08-19T00:00:00Z</published>
    <updated>2018-08-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="highbar">
 
</div>
<div id="header">
<div class="box">
<div id="logo" class="name">
<h2 id="laziness-leads-to-progress"><a href="../">Laziness leads to progress!</a></h2>
</div>
<div id="navigation" class="pageslinks">
<div class="menuItems">
<a href="../" class="posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.md">Home</a> <a href="../blog.html" class="posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.md">Blog</a> <a href="../archive.html" class="posts/2018-08-19-Input-Capture-Linux-Char-Driver-first-part.md">Archive</a>
</div>
</div>
</div>
</div>
<div class="container-gallery">
<div id="content" class="inside">
<div class="section header">
<h2 id="input-capture-linux-char-driver---i-part">Input Capture Linux Char Driver - I part</h2>
Posted on August 19, 2018
</div>
<div class="info">
Tags: <a href="../tags/linux.html">linux</a>, <a href="../tags/char%20drivers.html">char drivers</a>, <a href="../tags/drivers.html">drivers</a>
</div>
<div class="section">
<h2 id="introduction">Introduction</h2>
<p>To the best of my knowledge, on Linux there is no way to configure a hardware timer in input capture mode although, since it can be used on embedded systems, this feature can be needed. For example, if one needs to measure the period of a signal on a development board running a Linux distro he has no other way than sampling the GPIOs in userspace with the cost of a resolution of milliseconds.</p>
<h2 id="input-capture">Input Capture</h2>
<p>Considering a rectangular signal like in Figure 1 and one want to measure the period of the signal or the pulse width. Basically, to measure the period of the signal two successive edges of the same polarity are captured and to measure the pulse width, two alternate polarity edges are captured.</p>
<div class="figure">
<img src="../images/pwm_signal.jpg" title="Rectangular Signal" alt="Figure 1:Rectangular Signal" />
<p>Figure 1:Rectangular Signal</p>
</div>
<p>For example, if one wants to measure the high time of a pulse it is enough to subtract the time captured when the rissing edge occurs from the time captured for the subsequent falling edge. This scenario can be easily implemented on a microcontroller using a hardware timer in input capture mode and I won’t get into details.</p>
<p>But if one only have a development board with a Linux based OS it’s hard to implement this task. The only option I can imagine is to use the GPIOs with rising and falling edges events enabled and to poll them. Of course, the obtained samples will be horrible and the resolution in milliseconds range. Or it’ll be almost impossible.</p>
<p>The options to “hack” the timers are excluded. Personally, I wanted to do that and I didn’t found a proof that worked for someone. And also I didn’t found any APIs, libraries to select a timer and put it into input capture mode. Of course, I didn’t allocate much time for that task but the idea is that I couldn’t found and maybe there isn’t something like that.</p>
<p>One can say that another option is to use a microcontroller and program it to perform the task of measuring the signal and to communicate with the development board via I2C, for example. Yes, it is possible but sometimes you don’t have a microcontroller to use only for this small task.</p>
<h2 id="linux-char-driver">Linux Char Driver</h2>
<p>The solution described in this post: implementing a char driver.</p>
<p><strong>Requirements</strong>:</p>
<ol style="list-style-type: decimal">
<li><p>Service the interrupt thrown when rising, falling or both are detected on a GPIO.</p></li>
<li><p>Sample a timer to get the timestamp.</p></li>
<li><p>Detection of rising, falling or both must be configurable.</p></li>
<li><p>GPIO pin used must be configurable.</p></li>
<li><p>Notify userspace that a new value was read.</p></li>
</ol>
<p>In this article I won’t describe how to create a character driver for Linux, there are a lot of articles, quite nice described but somehow incomplete, on Web and also some very good books. In a future post I will shortly describe how the driver was implemented and also the needed device tree file to test it on a Beaglebone Black device.</p>
<p>Basically the third, fourth and fifth requirements are the easiest to implement. Basically, we need to define a variable of type <strong>file_operations</strong> structure and to implement some basic functions like: open, release, read, ioctl and poll. It will be discussed in future article the implementation and the need for those functions.</p>
<p>To implement the first requirement a interrupt will be required and registered for the GPIO pin. The registers will be configured such that the interrupt will be thrown when the event will be detected.</p>
<p>Finally, the second requirement is somehow problematic. The simple solution is to use <strong>get_cycles()</strong> function which will return the number of clock cycles but on ARM microprocessors this function returns 0. So, guards should be used to call <strong>get_cycles()</strong> when the driver is not running on ARM microprocessor and to call another function for getting a timestamp when running on ARM.</p>
<h2 id="conclusions">Conclusions</h2>
<p>The implementation of the driver was quite easy after deciding what features should be implemented and after experimenting a few with <em>rw locks</em>, <em>tasklets</em> and so on. The most challenging part was debugging since for this driver I used only <strong>printk-technique</strong>, basically I printed logs for where I considered to be the problem. A step-by-step debugger, even on assembly code, would be much more appreciated.</p>
<div class="comments">
<div id="disqus_thread">

</div>
Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</div>
</div>
</div>
</div>
<div id="footer">
<div class="inside">
Site proudly generated by <a href="https://github.com/ardeleanasm"><em></em></a> <a href="https://www.linkedin.com/in/ardelean-sebastian-mihai"><em></em></a> <a href="https://ardeleanasm.github.io/atom.xml"><em></em></a> <a href="https://www.twitter.com/mihaiseba"><em></em></a> <a href="http://stackoverflow.com/users/1462225/23ars"><em></em></a> <a href="http://jaspervdj.be/hakyll">Hakyll</a>.
</div>
</div>]]></summary>
</entry>
<entry>
    <title>Circuit Design and Simulation in Geda</title>
    <link href="http://ardeleanasm.github.io/posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.html" />
    <id>http://ardeleanasm.github.io/posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.html</id>
    <published>2018-07-29T00:00:00Z</published>
    <updated>2018-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[Circuit Design and Simulation in Geda]]></summary>
</entry>
<entry>
    <title>2018-07-29-Circuit-Design-and-Simulation-in-Geda</title>
    <link href="http://ardeleanasm.github.io/posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.html" />
    <id>http://ardeleanasm.github.io/posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.html</id>
    <published>2018-07-29T00:00:00Z</published>
    <updated>2018-07-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="highbar">
 
</div>
<div id="header">
<div class="box">
<div id="logo" class="name">
<h2 id="laziness-leads-to-progress"><a href="../">Laziness leads to progress!</a></h2>
</div>
<div id="navigation" class="pageslinks">
<div class="menuItems">
<a href="../" class="posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.md">Home</a> <a href="../blog.html" class="posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.md">Blog</a> <a href="../archive.html" class="posts/2018-07-29-Circuit-Design-and-Simulation-in-Geda.md">Archive</a>
</div>
</div>
</div>
</div>
<div class="container-gallery">
<div id="content" class="inside">
<div class="section header">
<h2 id="circuit-design-and-simulation-in-geda">Circuit Design and Simulation in Geda</h2>
Posted on July 29, 2018
</div>
<div class="info">
Tags: <a href="../tags/geda.html">geda</a>, <a href="../tags/diode%20clipping%20circuit.html">diode clipping circuit</a>
</div>
<div class="section">
<p>This post won’t be a tutorial on electronic circuits but will present a free method to desing and simulate electronic circuits on Linux using <strong>Geda</strong> and <strong>ngspice</strong>.</p>
<p>To start, I will chose a simple diode clipping circuit which consist of the following elements:</p>
<ol style="list-style-type: decimal">
<li><p>2 1N4007 diodes</p></li>
<li><p>2 10K resistors</p></li>
</ol>
<div class="figure">
<img src="../images/Circuit-Design-and-Simulation-in-Geda-pic1.png" title="Img 1:Diode clipping circuit on both half cycles" alt="Img 1:Diode clipping circuit on both half cycles" />
<p>Img 1:Diode clipping circuit on both half cycles</p>
</div>
<p>The schematic is available in Img 1. Note that for this circuit is mandatory to have the <em>.mod</em> file for 1N4007 diode.</p>
<p>Now, using the terminal run the following commands:</p>
<ul>
<li><p><em>gnetlist -g spice-sdb -o diode.net diode.sch</em> to generate the netlist</p></li>
<li><em>ngspice</em> to run ngspice
<ul>
<li><p><em>source diode.net</em> to load the netlist</p></li>
<li><p><em>tran .01ms .15ms</em> to perform transient analysis</p></li>
<li><p><em>plot</em> to plot the signals.</p></li>
</ul></li>
</ul>
<p>For the above circuit, the plotted signals are presented in Img 2.</p>
<div class="figure">
<img src="../images/Circuit-Design-and-Simulation-in-Geda-pic2.png" title="Img 2:Diode clipping circuit plotted signals" alt="Img 2:Diode clipping circuit plotted signals" />
<p>Img 2:Diode clipping circuit plotted signals</p>
</div>
<div class="comments">
<div id="disqus_thread">

</div>
Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</div>
</div>
</div>
</div>
<div id="footer">
<div class="inside">
Site proudly generated by <a href="https://github.com/ardeleanasm"><em></em></a> <a href="https://www.linkedin.com/in/ardelean-sebastian-mihai"><em></em></a> <a href="https://ardeleanasm.github.io/atom.xml"><em></em></a> <a href="https://www.twitter.com/mihaiseba"><em></em></a> <a href="http://stackoverflow.com/users/1462225/23ars"><em></em></a> <a href="http://jaspervdj.be/hakyll">Hakyll</a>.
</div>
</div>]]></summary>
</entry>
<entry>
    <title>Checksum generator in Haskell</title>
    <link href="http://ardeleanasm.github.io/posts/2018-06-22-checksum-generator-haskell.html" />
    <id>http://ardeleanasm.github.io/posts/2018-06-22-checksum-generator-haskell.html</id>
    <published>2018-06-22T00:00:00Z</published>
    <updated>2018-06-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[Simple checksum generator in Haskell]]></summary>
</entry>
<entry>
    <title>2018-06-22-checksum-generator-haskell</title>
    <link href="http://ardeleanasm.github.io/posts/2018-06-22-checksum-generator-haskell.html" />
    <id>http://ardeleanasm.github.io/posts/2018-06-22-checksum-generator-haskell.html</id>
    <published>2018-06-22T00:00:00Z</published>
    <updated>2018-06-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="highbar">
 
</div>
<div id="header">
<div class="box">
<div id="logo" class="name">
<h2 id="laziness-leads-to-progress"><a href="../">Laziness leads to progress!</a></h2>
</div>
<div id="navigation" class="pageslinks">
<div class="menuItems">
<a href="../" class="posts/2018-06-22-checksum-generator-haskell.md">Home</a> <a href="../blog.html" class="posts/2018-06-22-checksum-generator-haskell.md">Blog</a> <a href="../archive.html" class="posts/2018-06-22-checksum-generator-haskell.md">Archive</a>
</div>
</div>
</div>
</div>
<div class="container-gallery">
<div id="content" class="inside">
<div class="section header">
<h2 id="checksum-generator-in-haskell">Checksum generator in Haskell</h2>
Posted on June 22, 2018
</div>
<div class="info">
Tags: <a href="../tags/haskell.html">haskell</a>
</div>
<div class="section">
<p>A few years ago I wrote a checksum generator app in C++ and evolved in, what I like to say, an app with password cracking capabilities. In fact, it was only an app that opened a file and calculated the hash for each line and tested with the target hash value. Simple!</p>
<p>Simple and badly written. I even remove it because I remember that it was “OOP-like” written with a lot of duplicated code, implementations in .h file and so on. A collection of bad practices! It was working but, as I like to say, it was a miracle. :) I’m ashamed of that code and I hope that it cannot be found!</p>
<p>Anyway, since I started to work with Haskell a lot, I thought that I should rewrite that app. So, Hasher was implemented. It’s a command line tool that can work in interactive mode or by passing the options as command line arguments and can calculate MD5, SHA-1, SHA-256, SHA-512 hashes.</p>
<p>Hasher is implemented in three modules:</p>
<ol style="list-style-type: decimal">
<li><strong>Main</strong>-&gt; contains functions for printing help, app name and version and also contains the implementation of the interactive menu.</li>
<li><strong>HashGenerator</strong>-&gt; is a layer over cryptonite package.</li>
<li><strong>CommandLineParser</strong> -&gt; contains the implementation of command line arguments parsing.</li>
</ol>
<p>From the point of view of dependencies, as it can be seen in cabal file, the build depends on the following packages:</p>
<ul>
<li>bytestring</li>
<li>cryptonite</li>
<li>text</li>
<li>directory</li>
</ul>
<p>From the point of view of usage, as I said, it has implemented two modes, interactive and command line options.</p>
<h3 id="interactive-mode-example">Interactive Mode Example</h3>
<pre><code>$./hasher
  _    _           _               
 | |  | |         | |              
 | |__| | __ _ ___| |__   ___ _ __ 
 |  __  |/ _` / __| &#39;_ \ / _ \ &#39;__|
 | |  | | (_| \__ \ | | |  __/ |   
 |_|  |_|\__,_|___/_| |_|\___|_|   
Available Hash Functions:
	1. MD5
	2. SHA1
	3. SHA256
	4. SHA512
Select Hash Function:1
1. Hash plaintext
2. Hash File
1
Enter Plaintext:This is a test
&quot;ce114e4501d2f4e2dcea3e17b546f339&quot;
1. Continue
2. Exit
2</code></pre>
<h3 id="command-line-mode-example">Command Line Mode Example</h3>
<pre><code>$ ./hasher -h
  _    _           _               
 | |  | |         | |              
 | |__| | __ _ ___| |__   ___ _ __ 
 |  __  |/ _` / __| &#39;_ \ / _ \ &#39;__|
 | |  | | (_| \__ \ | | |  __/ |   
 |_|  |_|\__,_|___/_| |_|\___|_|   
hasher-exe &lt;parameter&gt; [&lt;value&gt;]
parameters:
		-h/--help	 help
		-v		 version
		-i		 interactive
		-f &lt;option&gt; &lt;file&gt;
		-s &lt;option&gt; &lt;plaintext&gt;
	_________________________________________________________
	|	Implemented Hash Functions	|	Option	|
	|		 MD5 			|	MD5	|
	|		 SHA1 			|	SHA1	|
	|		 SHA256 		|	SHA256	|
	|		 SHA512 		|	SHA512	|
	---------------------------------------------------------

$./hasher -s MD5 &quot;This is a test&quot;
  _    _           _               
 | |  | |         | |              
 | |__| | __ _ ___| |__   ___ _ __ 
 |  __  |/ _` / __| &#39;_ \ / _ \ &#39;__|
 | |  | | (_| \__ \ | | |  __/ |   
 |_|  |_|\__,_|___/_| |_|\___|_|   
&quot;ce114e4501d2f4e2dcea3e17b546f339&quot;</code></pre>
<p>If you want to test Hasher, you want to fill an issue or you want to contribute, you can find Hasher’s source code in this <a href="https://github.com/ardeleanasm/hasher">REPO</a>.</p>
<h3 id="usage">Usage</h3>
<ul>
<li>Clone or download repository</li>
<li>stack init</li>
<li>stack build</li>
</ul>
<div class="comments">
<div id="disqus_thread">

</div>
Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</div>
</div>
</div>
</div>
<div id="footer">
<div class="inside">
Site proudly generated by <a href="https://github.com/ardeleanasm"><em></em></a> <a href="https://www.linkedin.com/in/ardelean-sebastian-mihai"><em></em></a> <a href="https://ardeleanasm.github.io/atom.xml"><em></em></a> <a href="https://www.twitter.com/mihaiseba"><em></em></a> <a href="http://stackoverflow.com/users/1462225/23ars"><em></em></a> <a href="http://jaspervdj.be/hakyll">Hakyll</a>.
</div>
</div>]]></summary>
</entry>
<entry>
    <title>Monte Carlo Integration</title>
    <link href="http://ardeleanasm.github.io/posts/2018-06-15-Monte-Carlo-Integration.html" />
    <id>http://ardeleanasm.github.io/posts/2018-06-15-Monte-Carlo-Integration.html</id>
    <published>2018-06-15T00:00:00Z</published>
    <updated>2018-06-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[A Monte Carlo Integration algorithm implemented in OCaml]]></summary>
</entry>
<entry>
    <title>2018-06-15-Monte-Carlo-Integration</title>
    <link href="http://ardeleanasm.github.io/posts/2018-06-15-Monte-Carlo-Integration.html" />
    <id>http://ardeleanasm.github.io/posts/2018-06-15-Monte-Carlo-Integration.html</id>
    <published>2018-06-15T00:00:00Z</published>
    <updated>2018-06-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="highbar">
 
</div>
<div id="header">
<div class="box">
<div id="logo" class="name">
<h2 id="laziness-leads-to-progress"><a href="../">Laziness leads to progress!</a></h2>
</div>
<div id="navigation" class="pageslinks">
<div class="menuItems">
<a href="../" class="posts/2018-06-15-Monte-Carlo-Integration.md">Home</a> <a href="../blog.html" class="posts/2018-06-15-Monte-Carlo-Integration.md">Blog</a> <a href="../archive.html" class="posts/2018-06-15-Monte-Carlo-Integration.md">Archive</a>
</div>
</div>
</div>
</div>
<div class="container-gallery">
<div id="content" class="inside">
<div class="section header">
<h2 id="monte-carlo-integration">Monte Carlo Integration</h2>
Posted on June 15, 2018
</div>
<div class="info">
Tags: <a href="../tags/OCaml.html">OCaml</a>
</div>
<div class="section">
<p>Monte Carlo methods are numerical techniques which rely on random sampling to approximate their results. Thus, in Monte Carlo integration, the process of numerical estimation of integrals is applied. Considering we want to integrate a one-dimensional function <span class="math inline">\(f(x)\)</span> from <span class="math inline">\(\textit{a}\)</span> to <span class="math inline">\(\textit{b}\)</span>: <span class="math display">\[F=\int_a^b f(x)\,\mathrm{d}x\]</span>. Since the integral of a function <span class="math inline">\(f(x)\)</span> can be interpreted as the area below the function’s curve, we can pick up a random value <span class="math inline">\(x \in [a,b]\)</span> and evaluate the function at <span class="math inline">\(\textit{x}\)</span> and multiply the result by <span class="math inline">\((b-a)\)</span>. If we plot the function’s curve and the result we will obtain a rectangle where <em>f(x)</em> is the height and <em>(b-a)</em> is the width, basically a crude approximation of the area under the curve. If we continue to evaluate the function at different random points between <em>a</em> and <em>b</em>, adding up the area of the rectangles and averaging the sum, the resulting number gets closer to the actual results of the integral.</p>
<p>Let’s consider an example in which the function we want to integrate is <span class="math inline">\(f(x)=\sin{x}\)</span> on interval <span class="math inline">\([0,\pi]\)</span> and write some <strong>OCaml</strong> code. The function plot can be seen in Fig. 1.</p>
<div class="figure">
<img src="../images/integration-sinx-curve.png" alt="Fig. 1:sin(x) curve" />
<p>Fig. 1:sin(x) curve</p>
</div>
<p>We will create a new module <strong>MonteCarlo</strong> with the interface defined in the below snippet:</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">module</span> <span class="kw">type</span> MonteCarlo_type=<span class="kw">sig</span>
  <span class="kw">val</span> initializePRNG:<span class="dt">unit</span>-&gt;<span class="dt">unit</span>
  <span class="kw">val</span> getRandomNumber:<span class="dt">unit</span>-&gt;<span class="dt">float</span>
  <span class="kw">val</span> approximate:(<span class="dt">float</span>-&gt;<span class="dt">float</span>)-&gt;<span class="dt">float</span>-&gt;<span class="dt">float</span>-&gt;<span class="dt">int</span>-&gt;<span class="dt">int</span>-&gt;<span class="dt">float</span>-&gt;<span class="dt">float</span>  
<span class="kw">end</span></code></pre></div>
</div>
<p>We have a function <em>initializePRNG</em> which will initialize the pseudorandom number generator, <code>let initializePRNG ()=Random.self_init()</code>. <code>let getRandomNumber ()=Random.float 1.0</code> function will only generate a pseudorandom number distributed on <span class="math inline">\([0,1]\)</span>. Finally, the most interesting function, <em>approximate</em> receives 6 parameters as follow: <em>. First parameter is the function <span class="math inline">\(f(x)\)</span></em> . Second and third parameters are the limits <em>a</em> and <em>b</em>. <em>. Fourth parameter is the number of iterations.</em> . Fifth parameter is the current iteration *. Sixth parameter is the sumed value.</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">let</span> <span class="kw">rec</span> approximate f a b n index value=
    <span class="kw">if</span> index=(n<span class="dv">-1</span>) <span class="kw">then</span>
      ((b-.a)/.(<span class="dt">float_of_int</span> index))*.value
    <span class="kw">else</span>
      <span class="kw">let</span> randVal=getRandomNumber() <span class="kw">in</span>
      <span class="kw">let</span> inInterval=a+.randVal*.(b-.a) <span class="kw">in</span>
      <span class="kw">let</span> fVal=f inInterval <span class="kw">in</span>
      approximate f a b n (index+<span class="dv">1</span>) (value+.fVal)</code></pre></div>
</div>
<p>The complete <em>MonteCarlo</em> module is implemented bellow:</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">open</span> <span class="dt">Random</span>
<span class="kw">open</span> MonteCarlo_type

<span class="kw">module</span> MonteCarlo:MonteCarlo_type=<span class="kw">struct</span>
  <span class="kw">let</span> initializePRNG ()=<span class="dt">Random</span>.self_init()
  <span class="kw">let</span> getRandomNumber ()=<span class="dt">Random</span>.<span class="dt">float</span> <span class="fl">1.0</span>
  
  <span class="kw">let</span> <span class="kw">rec</span> approximate f a b n index value=
    <span class="kw">if</span> index=(n<span class="dv">-1</span>) <span class="kw">then</span>
      ((b-.a)/.(<span class="dt">float_of_int</span> index))*.value
    <span class="kw">else</span>
      <span class="kw">let</span> randVal=getRandomNumber() <span class="kw">in</span>
      <span class="kw">let</span> inInterval=a+.randVal*.(b-.a) <span class="kw">in</span>
      <span class="kw">let</span> fVal=f inInterval <span class="kw">in</span>
      approximate f a b n (index+<span class="dv">1</span>) (value+.fVal)
<span class="kw">end</span></code></pre></div>
</div>
<p>Finally, to use the code we just need to define the function that we want to integrate and call approximate, as bellow:</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><span class="kw">open</span> MonteCarlo

<span class="kw">let</span> pi = <span class="fl">4.0</span> *. <span class="dt">atan</span> <span class="fl">1.0</span>;;
<span class="kw">let</span> func (x:<span class="dt">float</span>)=<span class="dt">sin</span> x
<span class="kw">let</span> () = 
  MonteCarlo.initializePRNG();
  <span class="dt">print_float</span> (MonteCarlo.approximate func <span class="fl">0.0</span> pi <span class="dv">100000</span> <span class="dv">0</span> <span class="fl">0.0</span>)</code></pre></div>
</div>
<div class="comments">
<div id="disqus_thread">

</div>
Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</div>
</div>
</div>
</div>
<div id="footer">
<div class="inside">
Site proudly generated by <a href="https://github.com/ardeleanasm"><em></em></a> <a href="https://www.linkedin.com/in/ardelean-sebastian-mihai"><em></em></a> <a href="https://ardeleanasm.github.io/atom.xml"><em></em></a> <a href="https://www.twitter.com/mihaiseba"><em></em></a> <a href="http://stackoverflow.com/users/1462225/23ars"><em></em></a> <a href="http://jaspervdj.be/hakyll">Hakyll</a>.
</div>
</div>]]></summary>
</entry>
<entry>
    <title>Common-Cathode 7-segments display driver implementation in Verilog</title>
    <link href="http://ardeleanasm.github.io/posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.html" />
    <id>http://ardeleanasm.github.io/posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.html</id>
    <published>2018-04-08T00:00:00Z</published>
    <updated>2018-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[Common-Cathode 7-segments display driver implementation in Verilog]]></summary>
</entry>
<entry>
    <title>2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog</title>
    <link href="http://ardeleanasm.github.io/posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.html" />
    <id>http://ardeleanasm.github.io/posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.html</id>
    <published>2018-04-08T00:00:00Z</published>
    <updated>2018-04-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="highbar">
 
</div>
<div id="header">
<div class="box">
<div id="logo" class="name">
<h2 id="laziness-leads-to-progress"><a href="../">Laziness leads to progress!</a></h2>
</div>
<div id="navigation" class="pageslinks">
<div class="menuItems">
<a href="../" class="posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.md">Home</a> <a href="../blog.html" class="posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.md">Blog</a> <a href="../archive.html" class="posts/2018-04-08-Common-Cathode-7-segments-display-driver-implementation-in-Verilog.md">Archive</a>
</div>
</div>
</div>
</div>
<div class="container-gallery">
<div id="content" class="inside">
<div class="section header">
<h2 id="common-cathode-7-segments-display-driver-implementation-in-verilog">Common-Cathode 7-segments display driver implementation in Verilog</h2>
Posted on April 8, 2018
</div>
<div class="info">
Tags: <a href="../tags/verilog.html">verilog</a>, <a href="../tags/7-segments%20driver.html">7-segments driver</a>
</div>
<div class="section">
<h3 id="description">Description</h3>
<p>7-segment LED type displays provide a convenient way to display data, like numbers, letters, and typically consist of seven individual LEDs within one single display package. In order to produce the required data ( HEX characters from 0 to 9 and A to F), on the display the correct combination of LED segments need to be illuminated. However, to display BCD information on 7-segments we need to use a BCD to 7 segments decoder like 74LS47 or HC4511. A 7-segment LED display usually have 8 connections for each LED segment and one that acts as a GND or VCC. There are some displays that have an additional input pin used to display a decimal point. Anyway, in electronics there are 2 types of 7-segment displays:</p>
<ol style="list-style-type: decimal">
<li><strong>Common Cathode Display</strong> - all the cathode connections of the LED segments are joined together to <strong>Gnd</strong>. This means that a segment is illuminated by applying a logic ‘1’ signal to the <em>Anode</em> terminal. (Img 1a)</li>
<li><strong>Common Anode Display</strong> - all the anode connections of the LED segments are joined together to <strong>Vcc</strong> which means that to illuminate a segment a logic ‘0’ needs to be applied to the <em>Cathode</em> terminal. (Img 1b)</li>
</ol>
<div class="figure">
<img src="../images/common_cathode_anode_leds.png" title="Img 1:LED display types" alt="Img 1:LED display types" />
<p>Img 1:LED display types</p>
</div>
<div class="figure">
<img src="../images/led_scheme.png" title="Img 2: 7-segment display format" alt="Img 2: 7-segment display format" />
<p>Img 2: 7-segment display format</p>
</div>
<p>Considering Img 2 we can create the truth table below. Because we use a common cathode 7 segment display we will have 1 for each illuminated segment and 0 for not illuminated. Since we will design a BCD to 7-segments the values from 10 to 15 are invalid. For there values we will mark the corresponding segment with X, meaning don’t care.</p>
<table>
<thead>
<tr class="header">
<th><span class="math display">\[X_{3}\]</span></th>
<th><span class="math display">\[X_{2}\]</span></th>
<th><span class="math display">\[X_{1}\]</span></th>
<th><span class="math display">\[X_{0}\]</span></th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>d</th>
<th>e</th>
<th>f</th>
<th>g</th>
<th>Display</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="even">
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>3</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>4</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>5</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>6</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>7</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>8</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>9</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>-</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>-</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>0</td>
<td>-</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>0</td>
<td>x</td>
<td>-</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>x</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>-</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>x</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>x</td>
<td>x</td>
<td>x</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>Based on the above table we can express output as minterm expansions:</p>
<p><span class="math display">\[a = F_{1} (A, B, C, D) = \sum m(0, 2, 3, 5, 7, 8, 9)\]</span></p>
<p><span class="math display">\[b = F_{2} (A, B, C, D) = \sum m(0, 1, 2, 3, 4, 7, 8, 9)\]</span></p>
<p><span class="math display">\[c = F_{3} (A, B, C, D) = \sum m(0, 1, 3, 4, 5, 6, 7, 8, 9)\]</span></p>
<p><span class="math display">\[d = F_{4} (A, B, C, D) = \sum m(0, 2, 3, 5, 6, 8)\]</span></p>
<p><span class="math display">\[e = F_{5} (A, B, C, D) = \sum m(0, 2, 6, 8)\]</span></p>
<p><span class="math display">\[f = F_{6} (A, B, C, D) = \sum m(0, 4, 5, 6, 8, 9)\]</span></p>
<p><span class="math display">\[g = F_{7} (A, B, C, D) = \sum m(2, 3, 4, 5, 6, 8, 9)\]</span></p>
<p>Now we can construct the Karnaugh’s Map for each output term and then simplify it to obtain a logic combination of inputs for each output.</p>
<p><span class="math display">\[a=A\overline{B}\overline{C}+\overline{A}(C+\overline{B}\overline{D}+BD)\]</span></p>
<p><span class="math display">\[b=\overline{AC}\overline{B}+\overline{A}(CD+\overline{C}\overline{D})\]</span></p>
<p><span class="math display">\[c=\overline{B}\overline{C}+\overline{A}(B+D)\]</span></p>
<p><span class="math display">\[d=\overline{A}\overline{B}(C+\overline{D})+\overline{A}(C\overline{D}+BD\overline{C})+A\overline{B}\overline{C}\]</span></p>
<p><span class="math display">\[e=\overline{D}(\overline{B}\overline{C}+\overline{A}C)\]</span></p>
<p><span class="math display">\[f=\overline{A}(B\overline{CD}+\overline{C}\overline{D})+A\overline{B}\overline{C}\]</span></p>
<p><span class="math display">\[g=\overline{A}(C\overline{BD}+B\overline{C})+A\overline{B}\overline{C}\]</span></p>
<h3 id="implementation">Implementation</h3>
<div class="figure">
<img src="../images/hc4511_block_scheme.png" title="Img 3:TI HC4511 block scheme" alt="Img 3:TI HC4511 block scheme" />
<p>Img 3:TI HC4511 block scheme</p>
</div>
<p>In Img 3 is the block scheme of the TI HC4511 BCD-to-7 segment latch/decoder/driver.</p>
<h4 id="decoder-implementation">Decoder Implementation</h4>
<p>The <strong>decoder</strong> will have 2 input ports ( <em>BL</em> signal, <em>D[0:3]</em>) and one output port, <em>D[0:7]</em>and will contain the implementation of the above equations. Moreover, the output of decoder will be blank ( 0 ) if <strong>BL</strong> signal is 0.</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span class="kw">module</span> dec_7seg(
    datain,bl,dataout
    );

    <span class="dt">input</span>   [<span class="dv">3</span>:<span class="dv">0</span>]   datain; 
    <span class="dt">input</span>           bl;
    <span class="dt">output</span>  [<span class="dv">7</span>:<span class="dv">0</span>]   dataout;
    
    <span class="kw">assign</span> dataout[<span class="dv">7</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:(datain[<span class="dv">3</span>]&amp;(~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]))|
                ((~datain[<span class="dv">3</span>])&amp;(datain[<span class="dv">1</span>]|(((~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">0</span>]))|(datain[<span class="dv">2</span>]&amp;datain[<span class="dv">0</span>]))));

    <span class="kw">assign</span> dataout[<span class="dv">6</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:((~(datain[<span class="dv">3</span>]&amp;datain[<span class="dv">1</span>]))&amp;(~datain[<span class="dv">2</span>]))|
                        ((~datain[<span class="dv">3</span>])&amp;((datain[<span class="dv">1</span>]&amp;datain[<span class="dv">0</span>])|((~datain[<span class="dv">1</span>])&amp;(~datain[<span class="dv">0</span>]))));

    <span class="kw">assign</span> dataout[<span class="dv">5</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:((~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]))|
                        ((~datain[<span class="dv">3</span>])&amp;(datain[<span class="dv">2</span>]|datain[<span class="dv">0</span>]));

	<span class="kw">assign</span> dataout[<span class="dv">4</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:
                ((~datain[<span class="dv">3</span>])&amp;(~datain[<span class="dv">2</span>])&amp;(datain[<span class="dv">1</span>]|(~datain[<span class="dv">0</span>])))|
                ((~datain[<span class="dv">3</span>])&amp;((datain[<span class="dv">1</span>]&amp;(~datain[<span class="dv">0</span>]))|(datain[<span class="dv">2</span>]&amp;datain[<span class="dv">0</span>]&amp;(~datain[<span class="dv">1</span>]))))|
                (datain[<span class="dv">3</span>]&amp;(~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]));

    <span class="kw">assign</span> dataout[<span class="dv">3</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:
                (~datain[<span class="dv">0</span>])&amp;(((~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]))|((~datain[<span class="dv">3</span>])&amp;datain[<span class="dv">1</span>]));

    <span class="kw">assign</span> dataout[<span class="dv">2</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:
        ((~datain[<span class="dv">3</span>])&amp;((datain[<span class="dv">2</span>]&amp;(~(datain[<span class="dv">1</span>]&amp;datain[<span class="dv">0</span>])))|((~datain[<span class="dv">1</span>])&amp;(~datain[<span class="dv">0</span>]))))|
        (datain[<span class="dv">3</span>]&amp;(~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]));

    <span class="kw">assign</span> dataout[<span class="dv">1</span>]=(bl==<span class="bn">1&#39;b0</span>)?<span class="bn">8&#39;b00000000</span>:
            ((~datain[<span class="dv">3</span>])&amp;((datain[<span class="dv">1</span>]&amp;(~(datain[<span class="dv">2</span>]&amp;datain[<span class="dv">0</span>])))|(datain[<span class="dv">2</span>]&amp;(~datain[<span class="dv">1</span>]))))|
            (datain[<span class="dv">3</span>]&amp;(~datain[<span class="dv">2</span>])&amp;(~datain[<span class="dv">1</span>]));

    <span class="kw">assign</span> dataout[<span class="dv">0</span>]=<span class="bn">1&#39;b0</span>;<span class="co">//dot</span>
<span class="kw">endmodule</span> <span class="co">// decoder</span></code></pre></div>
</div>
<h4 id="latch-implementation">Latch Implementation</h4>
<p>We can easily implement a D-type latch using an <strong>always</strong> block. We will need 5 ports, 3 for input signals ( data in, enable, <span class="math inline">\(\overline{enable}\)</span> ) and 2 for output signals ( q and <span class="math inline">\(\overline{q}\)</span>).</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span class="kw">module</span> dlatch(
    d,q,nq,ena,nena
    );
    
    <span class="dt">input</span>       d;
    <span class="dt">input</span>       ena;
    <span class="dt">input</span>       nena;
    <span class="dt">output</span>  <span class="dt">reg</span> q;
    <span class="dt">output</span>  <span class="dt">reg</span> nq;

    <span class="kw">always</span> @(d,ena,nena) <span class="kw">begin:</span><span class="dt"> d</span>_latch_procedure
        <span class="kw">if</span>(ena) <span class="kw">begin</span>
            q&lt;=d;
            nq&lt;=~d;
        <span class="kw">end</span> <span class="co">// if( le=&#39;1&#39;)</span>
        <span class="kw">else</span> <span class="kw">begin</span>
        <span class="kw">end</span>

    <span class="kw">end</span> <span class="co">// d_latch_procedure</span>

<span class="kw">endmodule</span> <span class="co">// dlatch</span></code></pre></div>
</div>
<h4 id="driver-implementation">Driver Implementation</h4>
<p>The driver will have to set output to 1 if <em>LT</em> (Lamp Test) signal is low, otherwise the output will be transparent to input. In other words, in can be implemented as a latch.</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span class="kw">module</span> drv_7seg(
    lt,inbus,outbus
    );

    <span class="dt">input</span>               lt;
    <span class="dt">input</span>       [<span class="dv">7</span>:<span class="dv">0</span>]   inbus;
    <span class="dt">output</span>  <span class="dt">reg</span> [<span class="dv">7</span>:<span class="dv">0</span>]   outbus;

    <span class="kw">always</span> @(lt,inbus) <span class="kw">begin :</span><span class="dt"> d</span>rv_7seg
        <span class="kw">if</span>(lt) <span class="kw">begin</span>
            outbus&lt;=inbus;
        <span class="kw">end</span> <span class="kw">else</span> <span class="kw">begin</span>
            outbus&lt;=<span class="bn">8&#39;b11111111</span>; 
        <span class="kw">end</span>
    <span class="kw">end</span>

<span class="kw">endmodule</span> <span class="co">// drv_7seg</span></code></pre></div>
</div>
<h4 id="modules-instantiation-and-testbench">Modules Instantiation and testbench</h4>
<p>Now that we have all the modules defined we can create a new module <strong>driver_7_segments</strong> and instantiate them.</p>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span class="kw">module</span> driver_7_segments(
    inbus,le,lt,bl,outbus,
    );
    
    <span class="dt">input</span>       [<span class="dv">3</span>:<span class="dv">0</span>]   inbus;      <span class="co">//input data</span>
    <span class="dt">input</span>               le;             <span class="co">//latch-enable</span>
    <span class="dt">input</span>               lt;             <span class="co">//lamp-test-&gt;displays 8</span>
    <span class="dt">input</span>               bl;             <span class="co">//blanking-&gt; blank</span>
    <span class="dt">output</span> <span class="dt">reg</span>  [<span class="dv">7</span>:<span class="dv">0</span>]   outbus;


    <span class="dt">wire</span> [<span class="dv">3</span>:<span class="dv">0</span>]  latch_output;
    <span class="dt">wire</span> [<span class="dv">7</span>:<span class="dv">0</span>]  decoder_output;

    dlatch latch0(.d  (inbus[<span class="dv">0</span>]),.ena (~le),.nena(le),.q  (latch_output[<span class="dv">0</span>]),.nq ());
    
    dlatch latch1(.d  (inbus[<span class="dv">1</span>]),.ena (~le),.nena(le),.q  (latch_output[<span class="dv">1</span>]),.nq ());
    
    dlatch latch2(.d  (inbus[<span class="dv">2</span>]),.ena (~le),.nena(le),.q  (latch_output[<span class="dv">2</span>]),.nq ());

    dlatch latch3(.d  (inbus[<span class="dv">3</span>]),.ena (~le),.nena(le),.q  (latch_output[<span class="dv">3</span>]),.nq ());
    
    dec_7seg decoder_7_segments(.datain (latch_output),.bl     (bl),.dataout(decoder_output));
    
    drv_7seg driver_7_segments(.inbus (decoder_output),.lt    (lt),.outbus(outbus));
   
<span class="kw">endmodule</span> <span class="co">// segments_driver</span></code></pre></div>
</div>
<div class="sourceCode">
<div class="sourceCode"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span class="ot">`include </span><span class="fl">&quot;testbench/test_inc.v&quot;</span>
<span class="kw">module</span> driver_7_segments_tb;

	<span class="dt">reg</span>       [<span class="dv">3</span>:<span class="dv">0</span>]   inbus;      <span class="co">//input data</span>
    <span class="dt">reg</span>               le;             <span class="co">//latch-enable</span>
    <span class="dt">reg</span>               lt;             <span class="co">//lamp-test-&gt;displays 8</span>
    <span class="dt">reg</span>               bl;             <span class="co">//blanking-&gt; blank</span>
    <span class="dt">wire</span> <span class="dt">reg</span>  [<span class="dv">7</span>:<span class="dv">0</span>]   outbus;

    driver_7_segments driver(.inbus (inbus),.le (le),.lt (lt),.bl (bl),.outbus(outbus));

    <span class="kw">initial</span> <span class="kw">begin</span>
        <span class="dt">$dumpfile</span>(<span class="st">&quot;segments_driver_tb.vcd&quot;</span>);
        <span class="dt">$dumpvars</span>;

        <span class="co">//Lamp Test</span>
        le&lt;=<span class="bn">1&#39;b0</span>;<span class="co">//latch is transparent</span>
        bl&lt;=<span class="bn">1&#39;b1</span>;<span class="co">//blanking is disabled</span>
        inbus&lt;=<span class="bn">4&#39;b0000</span>;<span class="co">//0 on inbus</span>
        lt&lt;=<span class="bn">1&#39;b0</span>;<span class="co">//lamp test enabled</span>
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11111111</span>);

        <span class="bn">#50</span> 
        <span class="co">//Blanking Test</span>
        le&lt;=<span class="bn">1&#39;b0</span>;<span class="co">//latch is transparent</span>
        bl&lt;=<span class="bn">1&#39;b0</span>;<span class="co">//blanking is enabled</span>
		inbus&lt;=<span class="bn">4&#39;b0000</span>;<span class="co">//0 on inbus</span>
        lt&lt;=<span class="bn">1&#39;b1</span>;<span class="co">//lamp test disabled</span>
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b00000000</span>);        

        <span class="bn">#50</span>
        <span class="co">//test all values</span>
        le&lt;=<span class="bn">1&#39;b0</span>;<span class="co">//latch is transparent</span>
        bl&lt;=<span class="bn">1&#39;b1</span>;<span class="co">//blanking is disabled</span>
        lt&lt;=<span class="bn">1&#39;b1</span>; <span class="co">//lamp test is disabled</span>
        
        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0000</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11111100</span>);
		
		<span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0001</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b01100000</span>);

		<span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0010</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11011010</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0011</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11110010</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0100</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b01100110</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0101</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b10110110</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0110</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b10111110</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b0111</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11100000</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b1000</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11111110</span>);

        <span class="bn">#25</span> inbus&lt;=<span class="bn">4&#39;b1001</span>;
        <span class="bn">#25</span> <span class="ot">`assert</span>(outbus,<span class="bn">8&#39;b11110110</span>);
    <span class="kw">end</span> <span class="co">// initial</span>

    <span class="kw">initial</span> <span class="kw">begin :</span><span class="dt">d</span>ump_proc
            <span class="dt">$display</span>(<span class="st">&quot;</span><span class="ch">\t\t</span><span class="st">Time</span><span class="ch">\t</span><span class="st">INBUS</span><span class="ch">\t</span><span class="st">/LE</span><span class="ch">\t</span><span class="st">/LT</span><span class="ch">\t</span><span class="st">/BL</span><span class="ch">\t</span><span class="st">OUTBUS&quot;</span>);
            <span class="dt">$monitor</span>(<span class="st">&quot;%d</span><span class="ch">\t</span><span class="st">%b</span><span class="ch">\t</span><span class="st">%b</span><span class="ch">\t</span><span class="st">%b</span><span class="ch">\t</span><span class="st">%b</span><span class="ch">\t</span><span class="st">%b&quot;</span>,<span class="dt">$time</span>,inbus,le,lt,bl,outbus);
    <span class="kw">end</span> <span class="co">// dump_proc</span>
<span class="kw">endmodule</span> <span class="co">// segments_driver_tb</span></code></pre></div>
</div>
<hr />
<h3 id="bibliography">Bibliography</h3>
<ol style="list-style-type: decimal">
<li><a href="http://www.ti.com/lit/ds/symlink/cd74hc4511.pdf">TI HC4511 Datasheet</a></li>
<li><a href="https://www.electronicshub.org/bcd-7-segment-led-display-decoder-circuit/">Electronics Hub</a></li>
<li><a href="https://www.electronics-tutorials.ws/combination/comb_6.html">Electronics Tutorials</a></li>
</ol>
<div class="comments">
<div id="disqus_thread">

</div>
Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</div>
</div>
</div>
</div>
<div id="footer">
<div class="inside">
Site proudly generated by <a href="https://github.com/ardeleanasm"><em></em></a> <a href="https://www.linkedin.com/in/ardelean-sebastian-mihai"><em></em></a> <a href="https://ardeleanasm.github.io/atom.xml"><em></em></a> <a href="https://www.twitter.com/mihaiseba"><em></em></a> <a href="http://stackoverflow.com/users/1462225/23ars"><em></em></a> <a href="http://jaspervdj.be/hakyll">Hakyll</a>.
</div>
</div>]]></summary>
</entry>

</feed>
